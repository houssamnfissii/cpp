#include <iostream>
// 6 video : preprocessing , compiling, linking

// step 1: Preprocessing
// The preprocessor handles directives like #include and #define. It processes these directives before the actual compilation begins. For example, it replaces #include <iostream> with the contents of the iostream header file.
// step 2: Compiling
// The compiler translates the preprocessed code into assembly language. It checks for syntax errors and generates an object file (.o or .obj) containing machine code.
// step 3: Linking
// The linker combines the object files generated by the compiler with libraries and other object files to create the final executable program. It resolves references to functions and variables across different files and libraries.
// The final executable can then be run on the target system.
int main()
{
    std::cout << "Line 1 \n";
    std::cout << "Line 2 ";
    return 0;
}